buildscript {
    ext.kotlin_version = '1.2.51'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'korosuke613.pict4java'
version '1.2'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.1'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    compile fileTree(dir: 'libs', include: '*.jar')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacoco {
    toolVersion = "0.8.0"
    applyTo junitPlatformTest
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main*'])
        })
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

task junitPlatformJacocoReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData junitPlatformTest
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/test/")
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:'**/*LibPict*')
        })
    }
}

task customeTest(dependsOn: [junitPlatformTest, junitPlatformJacocoReport]){}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// To specify a license in the pom:
install {
    repositories.mavenInstaller {
        pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }
}